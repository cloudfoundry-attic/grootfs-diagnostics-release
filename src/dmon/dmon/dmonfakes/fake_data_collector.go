// Code generated by counterfeiter. DO NOT EDIT.
package dmonfakes

import (
	"dmon/dmon"
	"sync"

	"code.cloudfoundry.org/lager"
)

type FakeDataCollector struct {
	CollectDataStub        func(logger lager.Logger)
	collectDataMutex       sync.RWMutex
	collectDataArgsForCall []struct {
		logger lager.Logger
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataCollector) CollectData(logger lager.Logger) {
	fake.collectDataMutex.Lock()
	fake.collectDataArgsForCall = append(fake.collectDataArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("CollectData", []interface{}{logger})
	fake.collectDataMutex.Unlock()
	if fake.CollectDataStub != nil {
		fake.CollectDataStub(logger)
	}
}

func (fake *FakeDataCollector) CollectDataCallCount() int {
	fake.collectDataMutex.RLock()
	defer fake.collectDataMutex.RUnlock()
	return len(fake.collectDataArgsForCall)
}

func (fake *FakeDataCollector) CollectDataArgsForCall(i int) lager.Logger {
	fake.collectDataMutex.RLock()
	defer fake.collectDataMutex.RUnlock()
	return fake.collectDataArgsForCall[i].logger
}

func (fake *FakeDataCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.collectDataMutex.RLock()
	defer fake.collectDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dmon.DataCollector = new(FakeDataCollector)
