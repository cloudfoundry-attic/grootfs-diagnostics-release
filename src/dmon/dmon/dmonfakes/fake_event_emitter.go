// Code generated by counterfeiter. DO NOT EDIT.
package dmonfakes

import (
	"dmon/dmon"
	"sync"
)

type FakeEventEmitter struct {
	EmitEventStub        func() error
	emitEventMutex       sync.RWMutex
	emitEventArgsForCall []struct{}
	emitEventReturns     struct {
		result1 error
	}
	emitEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventEmitter) EmitEvent() error {
	fake.emitEventMutex.Lock()
	ret, specificReturn := fake.emitEventReturnsOnCall[len(fake.emitEventArgsForCall)]
	fake.emitEventArgsForCall = append(fake.emitEventArgsForCall, struct{}{})
	fake.recordInvocation("EmitEvent", []interface{}{})
	fake.emitEventMutex.Unlock()
	if fake.EmitEventStub != nil {
		return fake.EmitEventStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.emitEventReturns.result1
}

func (fake *FakeEventEmitter) EmitEventCallCount() int {
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	return len(fake.emitEventArgsForCall)
}

func (fake *FakeEventEmitter) EmitEventReturns(result1 error) {
	fake.EmitEventStub = nil
	fake.emitEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventEmitter) EmitEventReturnsOnCall(i int, result1 error) {
	fake.EmitEventStub = nil
	if fake.emitEventReturnsOnCall == nil {
		fake.emitEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emitEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dmon.EventEmitter = new(FakeEventEmitter)
